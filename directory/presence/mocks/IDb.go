// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/nymtech/nym/validator/nym/directory/models"
	mock "github.com/stretchr/testify/mock"
)

// IDb is an autogenerated mock type for the IDb type
type IDb struct {
	mock.Mock
}

// ActiveTopology provides a mock function with given fields: reputationThreshold
func (_m *IDb) ActiveTopology(reputationThreshold int64) models.Topology {
	ret := _m.Called(reputationThreshold)

	var r0 models.Topology
	if rf, ok := ret.Get(0).(func(int64) models.Topology); ok {
		r0 = rf(reputationThreshold)
	} else {
		r0 = ret.Get(0).(models.Topology)
	}

	return r0
}

// AddGateway provides a mock function with given fields: gateway
func (_m *IDb) AddGateway(gateway models.RegisteredGateway) {
	_m.Called(gateway)
}

// AddMix provides a mock function with given fields: mix
func (_m *IDb) AddMix(mix models.RegisteredMix) {
	_m.Called(mix)
}

// RemoveNode provides a mock function with given fields: id
func (_m *IDb) RemoveNode(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetReputation provides a mock function with given fields: id, newRep
func (_m *IDb) SetReputation(id string, newRep int64) bool {
	ret := _m.Called(id, newRep)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int64) bool); ok {
		r0 = rf(id, newRep)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Topology provides a mock function with given fields:
func (_m *IDb) Topology() models.Topology {
	ret := _m.Called()

	var r0 models.Topology
	if rf, ok := ret.Get(0).(func() models.Topology); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Topology)
	}

	return r0
}
